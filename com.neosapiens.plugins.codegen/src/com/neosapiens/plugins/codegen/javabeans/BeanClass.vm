#set($packageDeclaration = $class.group("package ", $class.package.qualifiedName, ";", ""))
$packageDeclaration

import java.io.Serializable;

/**
 ** Class $class.name
 **/
#set($classVisibility = $class.group("", $class.javaVisibility, " ", " ", ""))
#set($classModifiers = $class.group("", $class.javaModifiers, " ", " ", ""))
#set($superClasses = $class.group(" extends ", $class.superClasses, ", ", "", ""))
#set($superInterfaces = $class.group(" implements ", $class.superInterfaces, ", ", ", Serializable", " implements Serializable"))
${classVisibility}${classModifiers}class ${class.name}${superClasses}${superInterfaces} { 
  //Fields
#foreach ($field in $class.fields)
#set($fieldModifiers = $field.group("", $field.javaModifiers, " ", " ", ""))
#set($fieldInitialValue = $field.group(" = ", $field.initialValue, "", ""))
  private ${fieldModifiers}${field.type} ${field.name}$fieldInitialValue;
#end

  //Constructors
#foreach ($constructor in $class.constructors)
#set($constructorVisibility = $constructor.group("", $constructor.javaVisibility, " ", " ", ""))
#set($constructorParameters = $constructor.group("(", $constructor.parameters, ", ", ")", "()"))
#set($constructorExceptions = $constructor.group(" throws ", $constructor.exceptions, ", ", "", ""))
  ${constructorVisibility}${class.name}${constructorParameters}${constructorExceptions}${constructor.body}
#end
#if ($class.constructors.empty)
  public ${class.name}() {}
#end

  //Getters
#foreach ($field in $class.fields)
#set($fieldModifiers = $field.group("", $field.javaModifiers, " ", " ", ""))
#set($fieldInitialValue = $field.group(" = ", $field.initialValue, "", ""))
  public ${fieldModifiers}${field.type} get${field.name.capitalized}() { return this.${field.name}; } 
#if ($field.boolean)
  public ${fieldModifiers}boolean is${field.name.capitalized}() { return this.${field.name}; } 
#end
#end

  //Setters
#foreach ($field in $class.fields)
#if (! $field.final)
#set($fieldModifiers = $field.group("", $field.javaModifiers, " ", " ", ""))
#set($fieldInitialValue = $field.group(" = ", $field.initialValue, "", ""))
  public ${fieldModifiers}void set${field.name.capitalized}(${field.type} value) { this.${field.name} = value; } 
#end
#end

  //Methods
#foreach ($method in $class.methods)
#set($methodVisibility = $method.group("", $method.javaVisibility, " ", " ", ""))
#set($methodModifiers  = $method.group("", $method.javaModifiers, " ", " ", ""))
#set($methodParameters = $method.group("(", $method.parameters, ", ", ")", "()"))
#set($methodExceptions = $method.group(" throws ", $method.exceptions, ", ", "", ""))
  ${methodVisibility}${methodModifiers}${method.type} ${method.name}${methodParameters}${methodExceptions}${method.body}
#end

  //Inner classes
#foreach ($inner in $class.innerClasses)

  /**
   ** Inner class $inner.name
   **/
#set($classModifiers = $inner.group("", $inner.javaModifiers, " ", " ", ""))
#set($superClasses = $inner.group(" extends ", $inner.superClasses, ", ", "", ""))
#set($superInterfaces = $inner.group(" implements ", $inner.superInterfaces, ", ", "", ""))
    ${classModifiers}class ${inner.name}${superClasses}${superInterfaces} { 

      //Fields
#foreach ($field in $inner.fields)
#set($fieldModifiers = $field.group("", $field.javaModifiers, " ", " ", ""))
#set($fieldInitialValue = $field.group(" = ", $field.initialValue, "", ""))
      ${fieldModifiers}${field.type} ${field.name}$fieldInitialValue;
#end

      //Constructors
#foreach ($constructor in $inner.constructors)
#set($constructorModifiers  = $constructor.group("", $constructor.javaModifiers, " ", " ", ""))
#set($constructorParameters = $constructor.group("(", $constructor.parameters, ", ", ")", "()"))
#set($constructorExceptions = $constructor.group(" throws ", $constructor.exceptions, ", ", "", ""))
      ${constructorModifiers}${class.name}${constructorParameters}${constructorExceptions}${constructor.body}
#end

      //Methods
#foreach ($method in $inner.methods)
#set($methodModifiers  = $method.group("", $method.javaModifiers, " ", " ", ""))
#set($methodParameters = $method.group("(", $method.parameters, ", ", ")", "()"))
#set($methodExceptions = $method.group(" throws ", $method.exceptions, ", ", "", ""))
      ${methodModifiers}${method.type} ${method.name}${methodParameters}${methodExceptions}${method.body}
#end
    } //end class $inner.name 
   
#end

} //end class $class.name 
